{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/":{"data":{"":" How it works Architecture Installation "},"title":"Documentation"},"/docs/architecture/":{"data":{"":" The Parliamentary Question Responder is built on a modular, cloud-based architecture designed for security, scalability, and with an ingestion mechanism from government systems.\nPQ Parliamentary Question Responder Architecture ","key-components#Key Components":"This architecture ensures that the Parliamentary Question Responder can be deployed securely within government environments while providing the flexibility to adapt to specific departmental needs and workflows.\nData Ingestion Layer\nConnects to government data sources (in this case https://questions-statements-api.parliament.uk) Processes and indexes the parliament questions into knowledge bases. The data can be periodically refreshed to ensure access to the latest published answers. AI Processing Engine\nLeverages Amazon Bedrock’s generative AI capabilities to performance semantic search for identifying similar questions, or draft responses against guidelines and parliament documentation. Maintains context awareness across indexed data sources. Response Generation System\nCreates draft responses following parliamentary writing conventions. Maintains citation links to source documents. API Integration Framework\nRESTful APIs for seamless integration with existing workflow systems Secure authentication and authorization controls User Interface Layer\nIntuitive web-based interface for analysts Secure access managed through Amazon Cognito "},"title":"Architecture"},"/docs/business-context/":{"data":{"":"","benefits#Benefits":" Time savings: reduction in time spent answering questions. Resource optimization: Frees resources to focus on more complex policy work. Consistency: Ensures alignment with previous positions and current policy across all responses. Cost efficiency: reduction in operational costs by automating research and drafting processes that currently consume thousands of staff hours annually. ","getting-started#Getting Started":"Ready to transform how your department handles parliamentary questions? Follow our installation guide to deploy this sample in your environment.\nHow it works Installation The Parliamentary Question Responder represents a practical application of AI to enhance democratic processes while maintaining human oversight.","our-solution#Our Solution":"The Parliamentary Question Responder streamlines this process through the following features. Intelligent similarity matching Identifies previous similar questions and their approved answers\nAI-powered drafting Generates draft responses using official parliamentary documents\nHuman-in-the-loop verification Ensures analysts maintain complete control of the review, verification, and refinement process, with citations to source documents providing transparency and building trust in AI-generated content\nIntegration with government data sources Connects with existing official document repositories and information systems to extract the most current official publications\nAPI-based architecture Designed for easy integration with existing government workflow solutions and case management systems, minimizing disruption to established processes","the-challenge#The Challenge":"Government departments face significant challenges when handling PQs:\nVolume: In the UK alone, approximately 40,000 parliamentary questions are asked annually. Resource intensive: Each PQ requires research, drafting, fact-checking, and multiple approval stages Expertise required: Responses must align with official policy positions, be factually accurate, and maintain appropriate tone Time-sensitive: Departments typically have strict deadlines (often 24-48 hours) to provide comprehensive responses Current processes are labor-intensive, with each question requiring hours of civil servant time and sometimes coordination across multiple departments. Automating part of this process could significantly contribute to productivity and efficiency savings.","what-is-a-parliamentary-question#What is a Parliamentary Question?":"Parliamentary Questions are a fundamental mechanism for accountability in parliamentary systems. They allow elected representatives to formally question government ministers about policies, decisions, and actions."},"title":"Business Context"},"/docs/how-it-works/":{"data":{"":"","functionality#Functionality":"Sign On The application uses a standard authentication flow powered by Amazon Cognito. New users will need to create an account before accessing the system’s functionality.\nAccount Creation Process From the sign-in page, select “Create an account” Enter your email address and create a secure password Submit the form to initiate account verification Check your email for a verification code Enter the verification code on the confirmation screen Optionally, you may set up sign-in with a passkey for enhanced security and convenience Once verified, you’ll be automatically redirected to the application landing page Application Sign on Page Application Landing Page After signing in, users arrive at the landing page where they can choose between two primary functions: identifying similar parliamentary questions that have been previously answered to establish precedent, or drafting a new AI-assisted response complete with citations from official source materials.\nQuestion Intake \u0026 Similar Question Detection When an analyst enters a new parliamentary question into the web interface, the system automatically analyses the content and identifies similar questions that have been previously answered. This allows analysts to quickly establish precedent and maintain consistency in government responses.\nSimilar Questions Interface User Interface: System displays the current question alongside previously answered questions ranked by similarity AI-Assisted Drafting With a click of a button, the system generates draft responses based on official parliamentary documents. Each draft includes citations to source materials, ensuring transparency and verifiability.\nAI-Assisted Drafting User Interface: AI-generated draft with source citations ready for analyst review "},"title":"How it Works"},"/docs/installation/":{"data":{"":" ℹ️ Installation typically takes between 20-30 minutes. ","accessing-the-application#Accessing the Application":"To access the frontend website, locate the SiteCloudFrontUrl value from the stack outputs (this is also displayed as the final output of the gmake deploy command) and paste this URL into your browser. When the page loads, click the Sign In button and then select the Create an account link to set up your user account.\nAfter completing the account creation process, you can use the Find similar questions feature to search for previously asked questions and their responses, or use the Chat feature to interact with the publications Knowledge Base and draft responses to parliamentary questions.","installation#Installation":"From a shell that is authenticated to your AWS Account, change directory to where you would like to clone the repo.\n#Clone the GitHub repository git clone https://github.com/aws-samples/sample-parliamentary-question-responder.git #Change directory cd sample-parliamentary-question-responder #Run the initialization process gmake init #Activate the Python virtual environment source .venv/bin/activate #Deploy the application gmake deploy Once the sample is deployed AWS Lambda functions are called to pull the last 4 days of written questions and publications from the Education Committee from the Parliamentary API. Once the content has been retrieved it is added to the appropriateAmazon Bedrock Knowledge Bases. This asynchronous process can take a few minutes to complete, you can track progress by looking at the length of the Amazon Simple Queue Service queues.","prerequisite#Prerequisite":" AWS Account Current shell authenticated to your AWS Account Model access granted in target region (default us-west-2) for: anthropic.claude-3-sonnet-20240229-v1:0 amazon.titan-embed-text-v2:0 AWS CLI Python 3.13 Node v20 (configured in your terminal) make \u003e v4 (brew install make) ","useful-commands#Useful Commands":" gmake init (Install / update python and node dependencies) gmake deploy (Deploy the latest version of the backend, frontend and retrieve the last 4 days of written questions and all publications from the Education Committee to the Knowledge Bases) gmake delete (Delete the sample from your AWS Account including all data) gmake deploy-backend (Deploy the latest version of the backend) gmake sync-backend (Deploy backend changes as updates are saved) gmake deploy-frontend (Deploy the latest version of the frontend) gmake run-frontend (Run the frontend locally) gmake get-questions-\u003cnumber of days\u003e (Retrieve the last number of days questions to add to the Knowledge Base) gmake clean (Remove temp files from the project directory) gmake unit (Run backend unit tests) gmake integration (Run backend integration tests) "},"title":"Installation"}}